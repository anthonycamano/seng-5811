--- enum types for each item
type pedestrianLight = enum {WAIT, WALK, FLASH};
type trafficLight =  enum {RED, AMBER, GREEN};
type buttonState = enum {RESET, SET};

-- multiple inputs always initialize to true by jkind...
node main(
    choose_walk_or_flash,
    choose_flash_or_wait,
    choose_green_or_amber,
    choose_amber_or_red,
    choose_reset_or_set: bool
) returns (
    pedestrian_light: pedestrianLight;
    traffic_light: trafficLight;
    button_state: buttonState
);
var
    new_pedestrian_light: pedestrianLight;
    new_traffic_light: trafficLight;
    new_button_state: buttonState;

    safety_prop,
    valid_prop,
    invalid_prop: bool;
let
    -- Initial values and what gets returned
    pedestrian_light = WAIT -> new_pedestrian_light;
    traffic_light = RED -> new_traffic_light;
    button_state = RESET -> new_button_state;

    -- Constraints on the inputs
    assert(choose_walk_or_flash -> choose_walk_or_flash <> pre choose_walk_or_flash);
    assert(choose_flash_or_wait -> choose_flash_or_wait <> pre choose_flash_or_wait);
    assert(choose_green_or_amber -> choose_green_or_amber <> pre choose_green_or_amber);
    assert(choose_amber_or_red -> choose_amber_or_red <> pre choose_amber_or_red);
    assert(choose_reset_or_set -> choose_reset_or_set <> pre choose_reset_or_set);

    -- Transition logic for pedestrian_light
        new_pedestrian_light = if pre pedestrian_light = WAIT and pre traffic_light = RED and pre button_state = SET then WALK
        else if pre pedestrian_light = WAIT then WAIT
        else if pre pedestrian_light = WALK then
            if choose_walk_or_flash then WALK
            else FLASH
        else if pre pedestrian_light = FLASH then
            if choose_flash_or_wait then FLASH
            else WAIT
        else pre pedestrian_light;

    -- Transition logic for traffic_light
    new_traffic_light = if pre traffic_light = RED and pre pedestrian_light = WAIT and pre button_state = RESET then GREEN
        else if pre traffic_light = RED then RED
        else if pre traffic_light = GREEN and pre button_state = SET then
            if choose_green_or_amber then GREEN
            else AMBER
        else if pre traffic_light = GREEN then GREEN
        else if pre traffic_light = AMBER then
            if choose_amber_or_red then AMBER
            else RED
        else pre traffic_light;

    -- Transition logic for button_state
    new_button_state = if pre button_state = SET and pre pedestrian_light = WALK then RESET
        else if pre button_state = SET then SET
        else if pre button_state = RESET and pre traffic_light = GREEN then
            if choose_reset_or_set then RESET
            else SET
        else if pre button_state = RESET then RESET
        else pre button_state;

    safety_prop = not (traffic_light = GREEN and pedestrian_light = WALK);
    --%PROPERTY safety_prop;

    valid_prop = not (traffic_light = AMBER and pedestrian_light = WAIT and button_state = RESET);
    --%PROPERTY valid_prop;

    invalid_prop = pedestrian_light <> FLASH;
    --%PROPERTY invalid_prop;
tel;